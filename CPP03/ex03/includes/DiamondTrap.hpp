#ifndef DIAMONTRAP_HPP
# define DIAMONTRAP_HPP

#include <iostream>
#include <fstream>
#include <string>
#include <cstdlib>
#include <sstream> 
#include "ClapTrap.hpp"
#include "FragTrap.hpp"
#include "ScavTrap.hpp"

#define GREEN	"\033[32m"
#define RED  	"\033[31m"
#define BLUE	"\033[36m"
#define YELLOW	"\033[0;33m"
#define MAGENTA "\033[35m"
#define ORANGE  "\033[38;2;255;165;0m"
#define FORM    "\033[4m"
#define RESET	"\033[0m"

class DiamondTrap : public ScavTrap, public FragTrap
{
	private:
		std::string _name;
		
	public:
		DiamondTrap(void); // Default constructor
		DiamondTrap(const std::string name); 
		DiamondTrap(const DiamondTrap& copy);
		DiamondTrap& operator=(const DiamondTrap& copy);
		~DiamondTrap();
		
		//void attack(const std::string& target); //we use the one for ScavTrap
		using ScavTrap::attack;
		
		void whoAmI();
		std::string get_name() const;
};
		
#endif

/*
üõ†Ô∏è C√≥mo Funciona la Herencia Virtual
üìå Sin virtual:

DiamondTrap heredar√≠a dos copias separadas de ClapTrap: una desde ScavTrap y otra desde FragTrap.
Esto generar√≠a ambig√ºedad porque DiamondTrap no sabr√≠a cu√°l ClapTrap usar.
üìå Con virtual:

Se asegura que ClapTrap exista solo una vez.
ScavTrap y FragTrap no inicializan ClapTrap, solo lo referencian.
La √∫nica copia de ClapTrap es controlada por DiamondTrap..

como VIRTUAL esta solo en ScavTrap y FragTrap

1Ô∏è‚É£ ClapTrap (una sola copia, gracias a virtual)
2Ô∏è‚É£ ScavTrap (hereda ClapTrap pero no lo inicializa)
3Ô∏è‚É£ FragTrap (hereda ClapTrap pero no lo inicializa)
4Ô∏è‚É£ DiamondTrap (inicializa ClapTrap)


Cuando Solo Ten√≠as ClapTrap y ScavTrap:
Cuando solo ten√≠as dos clases (ClapTrap y ScavTrap), y ambas ten√≠an su propia versi√≥n de attack(), 
el polimorfismo ya estaba funcionando si ScavTrap heredaba de ClapTrap y la funci√≥n attack() era sobreescrita en ScavTrap.

En este caso, si t√∫ creabas un objeto de tipo ScavTrap y lo referenciabas o apuntabas como un ClapTrap, 
C++ utilizaba el polimorfismo impl√≠cito. Como ScavTrap sobrescrib√≠a la funci√≥n attack(), 
C++ usaba la versi√≥n de attack() de ScavTrap cuando el objeto real era un ScavTrap.

ClapTrap: Tiene una funci√≥n attack().
ScavTrap: Sobrescribe la funci√≥n attack(). --> no necesita virtual
FragTrap: No tiene su propia versi√≥n de attack().
DiamondTrap: Hereda de ScavTrap y FragTrap.

si FragTrap tambien tuviera la funci9n entnces habria que agregar un virtual ya que DiamondTrap no sabria cual tomar
ClapTrap es la clase base y tiene la versi√≥n original de attack(). Debes hacerla virtual para habilitar el polimorfismo.

*/